<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Greg Eng]]></title>
  <link href="http://gregeng.github.io/atom.xml" rel="self"/>
  <link href="http://gregeng.github.io/"/>
  <updated>2013-11-24T16:34:01-05:00</updated>
  <id>http://gregeng.github.io/</id>
  <author>
    <name><![CDATA[Greg Eng]]></name>
    <email><![CDATA[greg.eng@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hide Your Keys, Hide Your Tokens ... Unless Deploying to Heroku]]></title>
    <link href="http://gregeng.github.io/blog/2013/11/21/hide-your-keys/"/>
    <updated>2013-11-21T09:33:00-05:00</updated>
    <id>http://gregeng.github.io/blog/2013/11/21/hide-your-keys</id>
    <content type="html"><![CDATA[<p>In that case, you have to do a little more than just hide them.</p>

<p>Typically, an API will require a key or authentication token before serving data downstream. It&rsquo;s logical to avoid committing any of these to a public repo on GitHub, so I often found myself falling into a pattern. I would make hidden files in the assets folder of my project, then <code>.gitignore</code> each one.</p>

<p>It would result in a folder structure that might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/project
</span><span class='line'>    /lib
</span><span class='line'>      /assets
</span><span class='line'>        .api_key
</span><span class='line'>        .auth_token
</span><span class='line'>        .password
</span></code></pre></td></tr></table></div></figure>


<p>Then in the class that controls all of the API calls, I would do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Class</span> <span class="no">API</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">API_KEY</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;lib/assets/.api_key&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>  <span class="no">AUTH_TOKEN</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;lib/assets/.auth_token&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>  <span class="no">PASSWORD</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;lib/assets/.password&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">some_method</span>
</span><span class='line'>    <span class="ss">:user_key</span> <span class="o">=&gt;</span> <span class="no">API_KEY</span>
</span><span class='line'>    <span class="ss">:user_token</span> <span class="o">=&gt;</span> <span class="no">AUTH_TOKEN</span>
</span><span class='line'>    <span class="ss">:user_password</span> <span class="o">=&gt;</span> <span class="no">PASSWORD</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I set each relevant piece to a constant to be used in methods throughout the API interactions.</p>

<p>This way feels a little clunky, but it works. As long as you remember to add each hidden file to the .gitignore, it keeps the credentials safe. But as a project grows and it accumulates more authorizations, it becomes a little difficult to manage.</p>

<p>It wasn&rsquo;t until my group tried to deploy an app to Heroku that we discovered the better way. Heroku makes it simple to deploy a Rails app, but as a result it lacks a lot of the bells and whistles. As a result, it is impossible to log in to the server in a shell to upload each individual hidden file described above.</p>

<p>In order to accomplish the same level of security and function, we can instead use Heroku config variables that will be read at runtime. Heroku has some great <a href="https://devcenter.heroku.com/articles/config-vars#local-setup" target="_blank">documentation</a> on this topic.</p>

<p>It&rsquo;s very easy to set up from the local shell. Thanks to my teammate <a href="http://davidbella.github.io/" target="_blank">David Bella</a>, we were able to figure out what we needed to do immediately.</p>

<p>Just navigate to the root of your project directory and run the <code>heroku config:set</code> command.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku config:set <span class="nv">API_KEY</span><span class="o">=</span>abcefghijklmnopqrstuvwxyz
</span><span class='line'>heroku config:set <span class="nv">AUTH_TOKEN</span><span class="o">=</span>abc123doremi
</span><span class='line'>heroku config:set <span class="nv">PASSWORD</span><span class="o">=</span>p4ssw0rd
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all there is to it! If you want to see your setup at any point, just type <code>heroku config</code> to see an output like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>API_KEY:                     abcefghijklmnopqrstuvwxyz
</span><span class='line'>AUTH_TOKEN:                  abc123doremi
</span><span class='line'>PASSWORD:                    p4ssw0rd
</span></code></pre></td></tr></table></div></figure>


<p>This is great for production, but how can we get the same level of organization and clarity for our development environment? My classmate <a href="http://scottluptowski.com/" target="_blank">Scott Luptowski</a> told us about the <a href="https://github.com/bkeepers/dotenv" target="_blank">dotenv</a> gem that assists with that exact problem.</p>

<p>Start by including <code>gem 'dotenv-rails'</code> in your <code>Gemfile</code> in the appropriate groups. We only use it in <code>:test</code> and <code>:development</code>. Then, make a <code>.env</code> file at the root of your project directory. In it, include the assignments for each of the keys, tokens or passwords you want to call.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">API_KEY</span><span class="o">=</span>abcefghijklmnopqrstuvwxyz
</span><span class='line'><span class="nv">AUTH_TOKEN</span><span class="o">=</span>abc123doremi
</span><span class='line'><span class="nv">PASSWORD</span><span class="o">=</span>p4ssw0rd
</span></code></pre></td></tr></table></div></figure>


<p>Rails will be able to call these variables anywhere in the application by using this pattern: <code>ENV['API_KEY']</code>, <code>ENV['AUTH_TOKEN']</code>, <code>ENV['PASSWORD']</code>. The hard coded keys will stay out of your code and you will have one organized place to manage all the necessary information. Just remember to also add the .env file to your .gitignore. The app should now work seamlessly in both local development and production Heroku environments. A simple solution for an important problem!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Like My Coffee Strong ... and My Params Stronger]]></title>
    <link href="http://gregeng.github.io/blog/2013/11/06/i-like-my-coffee-strong-and-my-params-stronger/"/>
    <updated>2013-11-06T21:16:00-05:00</updated>
    <id>http://gregeng.github.io/blog/2013/11/06/i-like-my-coffee-strong-and-my-params-stronger</id>
    <content type="html"><![CDATA[<p>Before understanding the need for strong params in Rails, let&rsquo;s take a look at the idea of mass assignment in Ruby.</p>

<p>Mass assignment is a convenient technique rubyists can use to easily assign multiple attributes to an object at instantiation. Yanik Jayaram provides an excellent description of it in his blog <a href="http://modernlegend.github.io/blog/2013/03/16/what-is-mass-assignment/" target="_blank">post</a>. It uses elements of metaprogramming and the idea of dynamic definition which is artfully described by Emily Xie <a href="http://emilyxxie.github.io/blog/2013/11/02/defining-the-undefined-dynamic-definition-for-ruby-newcomers/" target="_blank">here</a>.</p>

<p>This pattern becomes extremely useful in Rails when dealing with user input in forms. A sign up form is a great place for this pattern.</p>

<p>Let&rsquo;s take a look at an example:</p>

<div align="center">
  <h2>Sign Up</h2>
  <form accept-charset="UTF-8" action="/create" class="signup-form" id="user_new" method="post">
    <input type="text" name="user[first_name]" placeholder="First name" value=""><br>
    <input type="text" name="user[last_name]" placeholder="Last name" value=""><br>
    <input type="email" name="user[email]" placeholder="Email Address" value=""><br>
    <input type="password" name="user[password]" placeholder="Password"><br>
    <input type="password" name="user[password_confirmation]" placeholder="Confirm Password"><br>
  </form>
</div>


<p>And here is the markup used to create that form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/create&quot;</span>   <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span>     <span class="na">name=</span><span class="s">&quot;user[first_name]&quot;</span>            <span class="na">placeholder=</span><span class="s">&quot;First name&quot;</span>      <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span>     <span class="na">name=</span><span class="s">&quot;user[last_name]&quot;</span>             <span class="na">placeholder=</span><span class="s">&quot;Last name&quot;</span>       <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;email&quot;</span>    <span class="na">name=</span><span class="s">&quot;user[email]&quot;</span>                 <span class="na">placeholder=</span><span class="s">&quot;Email Address&quot;</span>   <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">name=</span><span class="s">&quot;user[password]&quot;</span>              <span class="na">placeholder=</span><span class="s">&quot;Password&quot;</span>                <span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">name=</span><span class="s">&quot;user[password_confirmation]&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Confirm Password&quot;</span>        <span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the user submits this form, the params hash will inlude all the input values neatly nested as key value pairs within the sub key <code>user</code> hash. Then, it would be appropriate to assume somewhere in the <code>UsersController</code>, there is a method like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">UsersController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="n">redirect_to</span> <span class="vi">@user</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="s2">&quot;Error!&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead of having to individually call the following methods, <code>first_name=</code>, <code>last_name=</code>, <code>email=</code>, and <code>password=</code> to set all of these input values &hellip; mass assignment lets us get it done at a higher level of abstraction.</p>

<p>But with this convenience lies a crucial vulnerability. In the form example above, we can assume that this web application is backed by a database with a <code>users</code> table that may have more columns than the form leads us to believe. Perhaps administrators also have user accounts within the application and certain permissions are allocated to them. This could be based on an <code>admin</code> column that takes a boolean value of 0 or 1.</p>

<p>Using this knowledge, we can maliciously change any one of the inputs to alter the <code>admin</code> column instead &hellip; even if this wasn&rsquo;t the original intent of the form. Using Google&rsquo;s Chrome browser, I can inspect the element of the form and change the email input field to reference <code>user[admin]</code> instead of <code>user[email]</code></p>

<p>That might look something like this:</p>

<div align="center">
  <h2>Sign Up</h2>
  <form accept-charset="UTF-8" action="/create" class="signup-form" id="user_new" method="post">
    <input type="text" name="user[first_name]" placeholder="First name" value="Greg"><br>
    <input type="text" name="user[last_name]" placeholder="Last name" value="Eng"><br>
    <input type="email" name="user[admin]" placeholder="Email Address" value="1"><br>
    <input type="password" name="user[password]" placeholder="Password" value="password"><br>
    <input type="password" name="user[password_confirmation]" placeholder="Confirm Password" value="password"><br>
  </form>
</div>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/create&quot;</span>   <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span>     <span class="na">name=</span><span class="s">&quot;user[first_name]&quot;</span>            <span class="na">placeholder=</span><span class="s">&quot;First name&quot;</span>      <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span>     <span class="na">name=</span><span class="s">&quot;user[last_name]&quot;</span>             <span class="na">placeholder=</span><span class="s">&quot;Last name&quot;</span>       <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;email&quot;</span>    <span class="na">name=</span><span class="s">&quot;user[admin]&quot;</span>                 <span class="na">placeholder=</span><span class="s">&quot;Email Address&quot;</span>   <span class="na">value=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">name=</span><span class="s">&quot;user[password]&quot;</span>              <span class="na">placeholder=</span><span class="s">&quot;Password&quot;</span>                <span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">name=</span><span class="s">&quot;user[password_confirmation]&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Confirm Password&quot;</span>        <span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when I submit this form, the controller is going to create a record in the <code>users</code> table that is missing my email address. Instead, it will set the <code>admin</code> column to true and give me admin access rights to the application. Depending on the domain, I might be able to see and do a multitude of things I normally couldn&rsquo;t otherwise. That seems not preferable.</p>

<p>Luckily part of the Rails 4.0 core is a pattern that reinforces the idea of strong params. If we were to generate a scaffold using the <code>user</code> resource detailed above, it would produce 2 methods in the controller that look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Rails 4.0</span>
</span><span class='line'>
</span><span class='line'><span class="no">UsersController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>        <span class="n">redirect_to</span> <span class="vi">@user</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="s2">&quot;Error!&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">user_params</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:password</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This pattern illustrates the idea of sanitizing the parameters before letting them get anywhere near our domain model. Instead of directly taking in the params submitted through the internet form in the <code>create</code> method, we will first call the <code>private</code> method <code>user_params</code> (named after the resource).  This says it should require a sub key of <code>user</code> (resource name) and then only permit certain keys to make it through to the domain model. In effect, this creates a white list of acceptable inputs or <em>strong parameters</em>.</p>

<p>Now, the worst thing that could happen is a form that is submitted with incomplete user data. I think most would agree that is better than the former scenario.</p>

<p>The Rails scaffold comments on this pattern directly in the controller file:</p>

<blockquote><p>Never trust parameters from the scary internet, only allow the white list through.</p></blockquote>

<p>I like to imagine <a href="https://twitter.com/dhh/status/182591044108562433" target="_blank">DHH</a> himself saying this to really drive this point home.</p>

<p>So you too should enjoy your parameters and coffee the same way: <strong>strong</strong>.
Your code will be more defensive and the data will be cleaner in the long run.</p>

<br>


<h3>Additional Resources:</h3>


<p><a href = "http://edgeapi.rubyonrails.org/classes/ActionController/StrongParameters.html" target="_blank">Documentation</a><br>
<a href = "http://weblog.rubyonrails.org/2012/3/21/strong-parameters/" target="_blank"> DHH&rsquo;s Blog Post</a><br>
<a href ="http://pivotallabs.com/rails-4-testing-strong-parameters/" target="_blank">Pivotal Labs on Testing Strong Params</a><br>
<a href= "https://github.com/rails/strong_parameters" target="_blank"> Strong Params Gem for Earlier Ruby Versions</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yield! In the Name of Blocks]]></title>
    <link href="http://gregeng.github.io/blog/2013/10/23/yield-in-the-name-of-blocks/"/>
    <updated>2013-10-23T08:38:00-04:00</updated>
    <id>http://gregeng.github.io/blog/2013/10/23/yield-in-the-name-of-blocks</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s think it <a href="http://www.metrolyrics.com/stop-in-the-name-of-love-lyrics-the-supremes.html" target="_blank">over</a>&hellip;</p>

<p>In an earlier <a href="http://gregeng.github.io/blog/2013/10/09/abstraction-and-3-iterators/" target="_blank">post</a>, I talked about a few Ruby iterators and how they abstract to become useful tools. As promised, I&rsquo;m going to further break them down in order to describe the conept of <code>yield</code> in Ruby.</p>

<p>In Ruby, methods are functions that allow code to interact with all different pieces of the program. Compared to spoken languages, you can think of methods as the verbs which connect to nouns and other words to form sentences. Methods are able to receive a code <code>block</code> which unlocks limitless potential.
When defining our own methods, the magic of <code>yield</code> comes into play. If a method expects a block, it can invoke it by using <code>yield</code>.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Weather</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class='line'>         <span class="vi">@type</span> <span class="o">=</span> <span class="n">type</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">forecast</span>
</span><span class='line'>        <span class="k">yield</span><span class="p">(</span><span class="vi">@type</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">today</span> <span class="o">=</span> <span class="no">Weather</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;hot&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I am defining a weather class that takes an argument at instantiation. I&rsquo;ve also defined a method <code>forecast</code> that will take any block given and pass it the argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">today</span><span class="o">.</span><span class="n">forecast</span> <span class="k">do</span> <span class="o">|</span><span class="n">type</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;It&#39;s going to be </span><span class="si">#{</span><span class="n">type</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; It&#39;s going to be hot!</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I&rsquo;ve interpolated the variable with a friendly little forecast sentence.</p>

<p>But I could just as easily use a different block to perform a different function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">today</span><span class="o">.</span><span class="n">forecast</span> <span class="k">do</span> <span class="o">|</span><span class="n">type</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;It&#39;s going to be </span><span class="si">#{</span><span class="n">type</span><span class="o">.</span><span class="n">upcase</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">type</span><span class="o">.</span><span class="n">upcase</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">type</span><span class="o">.</span><span class="n">upcase</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; It&#39;s going to be HOT, HOT, HOT!</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case&hellip; I am loudly saying it&rsquo;s going to be <em>fairly</em> warm.</p>

<p>Building on this idea, you can see that it essentially allows any method to easily become an iterator. Here is another look at the iterators described in my previous post: <code>each</code>, <code>collect</code>, <code>select</code>.</p>

<p><code>each</code> dissected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_each</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">yield</span><span class="p">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">array</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_each</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># OUTPUT:</span>
</span><span class='line'><span class="c1"># 1</span>
</span><span class='line'><span class="c1"># 4</span>
</span><span class='line'><span class="c1"># 9</span>
</span><span class='line'><span class="c1"># 16</span>
</span><span class='line'><span class="c1"># 25</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>collect</code> dissected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_collect</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">collect</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="n">collect</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="k">yield</span><span class="p">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">collect</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">collect_results</span> <span class="o">=</span> <span class="n">my_collect</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>select</code> dissected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_select</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nb">select</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">yield</span><span class="p">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>      <span class="nb">select</span> <span class="o">&lt;&lt;</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">select</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">select_results</span> <span class="o">=</span> <span class="n">my_select</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>BONUS <code>none?</code> dissected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_none?</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">yield</span><span class="p">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_none?</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_none?</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">4</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>BONUS <code>include?</code> dissected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_include?</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">yield</span><span class="p">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_include?</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">my_include?</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">4</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>These examples are simple and isolated, but <code>yield</code> truly provides myriad possibilities when building sophisticated programs. To prove it, check out this <a href="http://rubylearning.com/blog/2010/11/30/how-do-i-build-dsls-with-yield-and-instance_eval/" target="_blank">blog post</a> by Michael Bleigh where he described constructing eloquent looking code to design a DSL (Domain Specific Language) with the help of <code>yield</code>.</p>

<p>Have you ever used <code>yield</code> to do something clever or noteworthy? Sound off in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abstraction and 3 Helpful Ruby Iterators]]></title>
    <link href="http://gregeng.github.io/blog/2013/10/09/abstraction-and-3-iterators/"/>
    <updated>2013-10-09T18:30:00-04:00</updated>
    <id>http://gregeng.github.io/blog/2013/10/09/abstraction-and-3-iterators</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve never been a big fan of modern art. Some pieces are so abstract that I don&rsquo;t really get the point &ndash; and I know I&rsquo;m not the only <a href="http://www.buzzfeed.com/jenlewis/quiz-can-you-tell-the-difference-between-modern-art-and-art
" target="_blank">one</a>.</p>

<p>But in programming, abstraction is different. It makes for more eloquent and productive code by concealing complexity. Let&rsquo;s witness abstraction by stepping through 3 related methods:
<code>each</code>,  <code>collect</code>  &amp;  <code>select</code>.</p>

<p>The <code>each</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers_array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">numbers_array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span> <span class="o">*</span> <span class="mi">2</span><span class="si">}</span><span class="s2"> &quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#output: 2 4 6 8 10 12 14 16 18 20</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers_array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>each</code> method iterates through individual elements in the array and returns the original array untouched.</p>

<p>When I first learned the <code>each</code> method, I used it almost exclusively when working with arrays to make the computer do alot of the leg work for me.</p>

<p><a href="http://en.wikipedia.org/wiki/Abraham_Maslow" target="_blank">Abraham Maslow</a> explains this consequence:</p>

<blockquote><p>&hellip;if all you have is a hammer, everything looks like a nail.</p></blockquote>

<p>However, since the <code>each</code> method does not change the original array, I started writing alot of code that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers_array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">odds_and_ends</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">numbers_array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">odds_and_ends</span> <span class="o">&lt;&lt;</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">else</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">odds_and_ends</span> <span class="o">&lt;&lt;</span> <span class="kp">false</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">odds_and_ends</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, I am creating a new empty array, just so I can shovel items into it with the <code>each</code> method. If this feels bulky to you, that&rsquo;s because it is! Programmers might say this pattern reeks of <em>code smell</em>.</p>

<p>The ruby <code>collect</code> method is a better tool for the job, and it is just an abstraction of the <code>each</code> method.</p>

<p>Here is <code>collect</code> using the example from above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">odds_and_ends</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="o">].</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">else</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the <code>collect</code> method returns a <strong>new</strong> array which I have set equal to &ldquo;odds_and_ends.&rdquo;</p>

<p>But what if we only wanted to return a <em>part</em> of the array if it matches certain criteria? In that case, <code>collect</code> no longer the best option.</p>

<p>As you might have guessed, the ruby <code>select</code> method is an abstraction of the <code>collect</code> method. It also returns a new array, with an implicit <em>if</em> clause built in.</p>

<p>Continuing with our example&hellip;</p>

<p>If we were to use <code>collect</code>, it would return a messy array including nil values&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">odds_and_ends</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="o">].</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">x</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;while <code>select</code> gets the job done more cleanly. It uses the implicit if to return only values matching the specified logic:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">odds_and_ends</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="o">].</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So remember, abstraction is your friend!</p>

<p>To recap: <code>select</code> is an abstraction of <code>collect</code> which is just an abstraction of <code>each</code>. Use them to <a href="http://images.wikia.com/richmoreacademy/images/0/07/Pine-tree-car-air-freshener.gif" target="_blank">freshen</a> up any and all code smell. I&rsquo;m still working to make sure I choose the right methods.</p>

<p>By the way, if you were wondering where the <code>each</code> method comes from, you would be right to assume it is just another abstraction of simpler ruby properties! In a future blog post, I will go over how all of these iteration methods break down using the <code>yield</code> statement.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test-Driven Development: More Than A Buzzword]]></title>
    <link href="http://gregeng.github.io/blog/2013/10/07/test-driven-development-more-than-a-buzzword/"/>
    <updated>2013-10-07T21:44:00-04:00</updated>
    <id>http://gregeng.github.io/blog/2013/10/07/test-driven-development-more-than-a-buzzword</id>
    <content type="html"><![CDATA[<p>Before starting programming classes, I had heard of test-driven development (TDD). I was told it was a good practice, similar to the way I was told to eat my green vegetables when I was younger. That&rsquo;s why up until today, I thought it was just another business <a href="http://unsuck-it.com/high-level-overview/" target="_blank">buzzword</a>.</p>

<p>Today we began to cover the basic principles of object-oriented programming (OOP). Even in a simple app with 3 related classes, you can begin to see the complexity unfold. With complexity comes fragility &hellip; and that’s where TDD comes into play.</p>

<p>Jason Arhart does a good job explaining TDD in his <a href="https://speakerdeck.com/lvrug/introduction-to-tdd-jason-arhart" target="_blank">speakerdeck</a>. Essentially, the process entails writing a simple test, letting it fail, and then writing the minimum amount of code to make the spec pass. He deftly sum&rsquo;s it up in a cyclical diagram describing the &ldquo;Red&rdquo;, &ldquo;Green&rdquo;, &ldquo;Refactor&rdquo; pattern. By following this method, you get a solid baseline of tests coupled with functioning code.</p>

<p>It&rsquo;s this constant cycle that allows programs and their programmers to evolve. To this end, I think its better to think of it as an upward spiral. With this approach, the process may be a bit slower, but ultimately the sky is the limit.</p>

<p>Jason describes TDD as a process that, &ldquo;turns the &lsquo;traditional&rsquo; on its head.&rdquo; I consider myself lucky to start learning in an environment where TDD is the convention. It feels great to pass each spec in a test suite and incrementally move from red to green. I liken it to the feeling you get when gambling and winning, only here you get to bet <em>with</em> the house.</p>

<p>If you want to learn more about TDD, Jason has another speakerdeck that describes the Ruby specific testing framework:<a href="https://speakerdeck.com/lvrug/rspec-for-beginners-jason-arhart" target="_blank"> RSpec</a>. We will be using more of RSpec as the semester continues at the Flatiron school.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Keep Climbing...]]></title>
    <link href="http://gregeng.github.io/blog/2013/09/29/just-keep-climbing/"/>
    <updated>2013-09-29T20:40:00-04:00</updated>
    <id>http://gregeng.github.io/blog/2013/09/29/just-keep-climbing</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been one week since the semester began. In that short time span there have been highs, lows, and countless lines of code mistakes in between. Each night I leave feeling drained. At times, I have been concerned that I might not be keeping pace with my classmates. Still, each morning I wake up energized looking forward to get to school.</p>

<p>In a class-wide retrospective dubbed &ldquo;Feeling Friday&rdquo;, I learned that my peers have the same worries. Avi wisely mitigated our concerns by offering some perspective. He assured us that as long as we are constantly exploring, practicing and trying&hellip; we would be just fine. He went on to explain that the high and lows are just factors of learning in general. Each peak represents the gratification that comes directly after learning something new. Each low is just a representation <em>trying</em> to learn something new.</p>

<p>Suddenly, pace is irrelevant. We&rsquo;re all on this journey <em>with</em> and not <em>against</em> each other. The peaks and valleys may come at different points for different people but they <strong>will</strong> come. The ascent can sometimes be arduous but it is often mostly just fun. The view from the top is extremely enticing.</p>

<p>That elusive feeling of elation is what keeps me coming back. I can&rsquo;t wait to hit that next peak.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://gregeng.github.io/blog/2013/09/24/hello-world/"/>
    <updated>2013-09-24T21:40:00-04:00</updated>
    <id>http://gregeng.github.io/blog/2013/09/24/hello-world</id>
    <content type="html"><![CDATA[<p><em>Hello World</em> &ndash; I&rsquo;ve written that simple phrase out so many times during the exercises in the Flatiron School <a href="http://prework.flatironschool.com/" target="_blank">prework</a>.  However, this time it&rsquo;s different. It certainly feels good to finally say that to something other than the terminal or console.</p>

<p>Over the course of this semester, I&rsquo;ll be blogging about my learning experience at the Flatiron School. I&rsquo;ll do my best to explain some of the topics we cover in order to help and inspire other hopeful developers. Thank you in advance for reading!</p>

<p>And just so we&rsquo;re acquainted, you should know I&rsquo;ve decided to become a web developer because &hellip;</p>

<p>I&rsquo;ve been an Internet consumer since before AOL <a href="https://dl.dropboxusercontent.com/u/15030603/aol-cd.jpeg" target="_blank">discs</a> ever came in metallic cases. The dial-up connection crescendo still echoes in my mind. Throughout my life web technology has always made things better and easier. Dropbox helped me collaborate on group projects in school. YouTube taught me how to use Excel for my career in finance. I worked for an online dating startup that simply could not exist without it. Now I&rsquo;m motivated to do more than consume by learning how to code. I hope to pay my love for the web forward with the things that I make in the future.</p>

<p>So again, hello world and hello readers!</p>
]]></content>
  </entry>
  
</feed>

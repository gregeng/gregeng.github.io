<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Greg Eng]]></title>
  <link href="http://gregeng.github.io/atom.xml" rel="self"/>
  <link href="http://gregeng.github.io/"/>
  <updated>2013-10-23T22:37:11-04:00</updated>
  <id>http://gregeng.github.io/</id>
  <author>
    <name><![CDATA[Greg Eng]]></name>
    <email><![CDATA[greg.eng@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Abstraction and 3 Helpful Ruby Iterators]]></title>
    <link href="http://gregeng.github.io/blog/2013/10/09/abstraction-and-3-iterators/"/>
    <updated>2013-10-09T18:30:00-04:00</updated>
    <id>http://gregeng.github.io/blog/2013/10/09/abstraction-and-3-iterators</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve never been a big fan of modern art. Some pieces are so abstract that I don&rsquo;t really get the point &ndash; and I know I&rsquo;m not the only <a href="http://www.buzzfeed.com/jenlewis/quiz-can-you-tell-the-difference-between-modern-art-and-art
" target="_blank">one</a>.</p>

<p>But in programming, abstraction is different. It makes for more eloquent and productive code by concealing complexity. Let&rsquo;s witness abstraction by stepping through 3 related methods:
<code>each</code>,  <code>collect</code>  &amp;  <code>select</code>.</p>

<p>The <code>each</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers_array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">numbers_array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">print</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">x</span> <span class="o">*</span> <span class="mi">2</span><span class="si">}</span><span class="s2"> &quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#output: 2 4 6 8 10 12 14 16 18 20</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers_array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>each</code> method iterates through individual elements in the array and returns the original array untouched.</p>

<p>When I first learned the <code>each</code> method, I used it almost exclusively when working with arrays to make the computer do alot of the leg work for me.</p>

<p><a href="http://en.wikipedia.org/wiki/Abraham_Maslow" target="_blank">Abraham Maslow</a> explains this consequence:</p>

<blockquote><p>&hellip;if all you have is a hammer, everything looks like a nail.</p></blockquote>

<p>However, since the <code>each</code> method does not change the original array, I started writing alot of code that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers_array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="n">odds_and_ends</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">numbers_array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">odds_and_ends</span> <span class="o">&lt;&lt;</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">else</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">odds_and_ends</span> <span class="o">&lt;&lt;</span> <span class="kp">false</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">odds_and_ends</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, I am creating a new empty array, just so I can shovel items into it with the <code>each</code> method. If this feels bulky to you, that&rsquo;s because it is! Programmers might say this pattern reeks of <em>code smell</em>.</p>

<p>The ruby <code>collect</code> method is a better tool for the job, and it is just an abstraction of the <code>each</code> method.</p>

<p>Here is <code>collect</code> using the example from above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">odds_and_ends</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="o">].</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">else</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="kp">true</span><span class="p">,</span> <span class="kp">false</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the <code>collect</code> method returns a <strong>new</strong> array which I have set equal to &ldquo;odds_and_ends.&rdquo;</p>

<p>But what if we only wanted to return a <em>part</em> of the array if it matches certain criteria? In that case, <code>collect</code> no longer the best option.</p>

<p>As you might have guessed, the ruby <code>select</code> method is an abstraction of the <code>collect</code> method. It also returns a new array, with an implicit <em>if</em> clause built in.</p>

<p>Continuing with our example&hellip;</p>

<p>If we were to use <code>collect</code>, it would return a messy array including nil values&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">odds_and_ends</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="o">].</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">x</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;while <code>select</code> gets the job done more cleanly. It uses the implicit if to return only values matching the specified logic:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">odds_and_ends</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="o">].</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So remember, abstraction is your friend!</p>

<p>To recap: <code>select</code> is an abstraction of <code>collect</code> which is just an abstraction of <code>each</code>. Use them to <a href="http://images.wikia.com/richmoreacademy/images/0/07/Pine-tree-car-air-freshener.gif" target="_blank">freshen</a> up any and all code smell. I&rsquo;m still working to make sure I choose the right methods.</p>

<p>By the way, if you were wondering where the <code>each</code> method comes from, you would be right to assume it is just another abstraction of simpler ruby properties! In a future blog post, I will go over how all of these iteration methods break down using the <code>yield</code> statement.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test-Driven Development: More Than A Buzzword]]></title>
    <link href="http://gregeng.github.io/blog/2013/10/07/test-driven-development-more-than-a-buzzword/"/>
    <updated>2013-10-07T21:44:00-04:00</updated>
    <id>http://gregeng.github.io/blog/2013/10/07/test-driven-development-more-than-a-buzzword</id>
    <content type="html"><![CDATA[<p>Before starting programming classes, I had heard of test-driven development (TDD). I was told it was a good practice, similar to the way I was told to eat my green vegetables when I was younger. That&rsquo;s why up until today, I thought it was just another business <a href="http://unsuck-it.com/high-level-overview/" target="_blank">buzzword</a>.</p>

<p>Today we began to cover the basic principles of object-oriented programming (OOP). Even in a simple app with 3 related classes, you can begin to see the complexity unfold. With complexity comes fragility &hellip; and that’s where TDD comes into play.</p>

<p>Jason Arhart does a good job explaining TDD in his <a href="https://speakerdeck.com/lvrug/introduction-to-tdd-jason-arhart" target="_blank">speakerdeck</a>. Essentially, the process entails writing a simple test, letting it fail, and then writing the minimum amount of code to make the spec pass. He deftly sum&rsquo;s it up in a cyclical diagram describing the &ldquo;Red&rdquo;, &ldquo;Green&rdquo;, &ldquo;Refactor&rdquo; pattern. By following this method, you get a solid baseline of tests coupled with functioning code.</p>

<p>It&rsquo;s this constant cycle that allows programs and their programmers to evolve. To this end, I think its better to think of it as an upward spiral. With this approach, the process may be a bit slower, but ultimately the sky is the limit.</p>

<p>Jason describes TDD as a process that, &ldquo;turns the &lsquo;traditional&rsquo; on its head.&rdquo; I consider myself lucky to start learning in an environment where TDD is the convention. It feels great to pass each spec in a test suite and incrementally move from red to green. I liken it to the feeling you get when gambling and winning, only here you get to bet <em>with</em> the house.</p>

<p>If you want to learn more about TDD, Jason has another speakerdeck that describes the Ruby specific testing framework:<a href="https://speakerdeck.com/lvrug/rspec-for-beginners-jason-arhart" target="_blank"> RSpec</a>. We will be using more of RSpec as the semester continues at the Flatiron school.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just Keep Climbing...]]></title>
    <link href="http://gregeng.github.io/blog/2013/09/29/just-keep-climbing/"/>
    <updated>2013-09-29T20:40:00-04:00</updated>
    <id>http://gregeng.github.io/blog/2013/09/29/just-keep-climbing</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been one week since the semester began. In that short time span there have been highs, lows, and countless lines of code mistakes in between. Each night I leave feeling drained. At times, I have been concerned that I might not be keeping pace with my classmates. Still, each morning I wake up energized looking forward to get to school.</p>

<p>In a class-wide retrospective dubbed &ldquo;Feeling Friday&rdquo;, I learned that my peers have the same worries. Avi wisely mitigated our concerns by offering some perspective. He assured us that as long as we are constantly exploring, practicing and trying&hellip; we would be just fine. He went on to explain that the high and lows are just factors of learning in general. Each peak represents the gratification that comes directly after learning something new. Each low is just a representation <em>trying</em> to learn something new.</p>

<p>Suddenly, pace is irrelevant. We&rsquo;re all on this journey <em>with</em> and not <em>against</em> each other. The peaks and valleys may come at different points for different people but they <strong>will</strong> come. The ascent can sometimes be arduous but it is often mostly just fun. The view from the top is extremely enticing.</p>

<p>That elusive feeling of elation is what keeps me coming back. I can&rsquo;t wait to hit that next peak.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://gregeng.github.io/blog/2013/09/24/hello-world/"/>
    <updated>2013-09-24T21:40:00-04:00</updated>
    <id>http://gregeng.github.io/blog/2013/09/24/hello-world</id>
    <content type="html"><![CDATA[<p><em>Hello World</em> &ndash; I&rsquo;ve written that simple phrase out so many times during the exercises in the Flatiron School <a href="http://prework.flatironschool.com/" target="_blank">prework</a>.  However, this time it&rsquo;s different. It certainly feels good to finally say that to something other than the terminal or console.</p>

<p>Over the course of this semester, I&rsquo;ll be blogging about my learning experience at the Flatiron School. I&rsquo;ll do my best to explain some of the topics we cover in order to help and inspire other hopeful developers. Thank you in advance for reading!</p>

<p>And just so we&rsquo;re acquainted, you should know I&rsquo;ve decided to become a web developer because &hellip;</p>

<p>I&rsquo;ve been an Internet consumer since before AOL <a href="https://dl.dropboxusercontent.com/u/15030603/aol-cd.jpeg" target="_blank">discs</a> ever came in metallic cases. The dial-up connection crescendo still echoes in my mind. Throughout my life web technology has always made things better and easier. Dropbox helped me collaborate on group projects in school. YouTube taught me how to use Excel for my career in finance. I worked for an online dating startup that simply could not exist without it. Now I&rsquo;m motivated to do more than consume by learning how to code. I hope to pay my love for the web forward with the things that I make in the future.</p>

<p>So again, hello world and hello readers!</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Greg Eng]]></title>
  <link href="http://gregeng.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://gregeng.github.io/"/>
  <updated>2014-08-17T20:21:54-07:00</updated>
  <id>http://gregeng.github.io/</id>
  <author>
    <name><![CDATA[Greg Eng]]></name>
    <email><![CDATA[greg.eng@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hide Your Keys, Hide Your Tokens ... Unless Deploying to Heroku]]></title>
    <link href="http://gregeng.github.io/blog/2013/11/21/hide-your-keys/"/>
    <updated>2013-11-21T09:33:00-08:00</updated>
    <id>http://gregeng.github.io/blog/2013/11/21/hide-your-keys</id>
    <content type="html"><![CDATA[<p>In that case, you have to do a little more than just hide them.</p>

<p>Typically, an API will require a key or authentication token before serving data downstream. It&rsquo;s logical to avoid committing any of these to a public repo on GitHub, so I often found myself falling into a pattern. I would make hidden files in the assets folder of my project, then <code>.gitignore</code> each one.</p>

<p>It would result in a folder structure that might look like this:
```bash
/project</p>

<pre><code>/lib
  /assets
    .api_key
    .auth_token
    .password
</code></pre>

<p>```</p>

<p>Then in the class that controls all of the API calls, I would do something like this:</p>

<p>```ruby
Class API</p>

<p>  API_KEY = open(&lsquo;lib/assets/.api_key&rsquo;).read()
  AUTH_TOKEN = open(&lsquo;lib/assets/.auth_token&rsquo;).read
  PASSWORD = open(&lsquo;lib/assets/.password&rsquo;).read</p>

<p>  def some_method</p>

<pre><code>:user_key =&gt; API_KEY
:user_token =&gt; AUTH_TOKEN
:user_password =&gt; PASSWORD
</code></pre>

<p>  end</p>

<p>end
```
I set each relevant piece to a constant to be used in methods throughout the API interactions.</p>

<p>This way feels a little clunky, but it works. As long as you remember to add each hidden file to the .gitignore, it keeps the credentials safe. But as a project grows and it accumulates more authorizations, it becomes a little difficult to manage.</p>

<p>It wasn&rsquo;t until my group tried to deploy an app to Heroku that we discovered the better way. Heroku makes it simple to deploy a Rails app, but as a result it lacks a lot of the bells and whistles. As a result, it is impossible to log in to the server in a shell to upload each individual hidden file described above.</p>

<p>In order to accomplish the same level of security and function, we can instead use Heroku config variables that will be read at runtime. Heroku has some great <a href="https://devcenter.heroku.com/articles/config-vars#local-setup" target="_blank">documentation</a> on this topic.</p>

<p>It&rsquo;s very easy to set up from the local shell. Thanks to my teammate <a href="http://davidbella.github.io/" target="_blank">David Bella</a>, we were able to figure out what we needed to do immediately.</p>

<p>Just navigate to the root of your project directory and run the <code>heroku config:set</code> command.</p>

<p>For example:
<code>bash
heroku config:set API_KEY=abcefghijklmnopqrstuvwxyz
heroku config:set AUTH_TOKEN=abc123doremi
heroku config:set PASSWORD=p4ssw0rd
</code>
That&rsquo;s all there is to it! If you want to see your setup at any point, just type <code>heroku config</code> to see an output like this:</p>

<p><code>bash
API_KEY:                     abcefghijklmnopqrstuvwxyz
AUTH_TOKEN:                  abc123doremi
PASSWORD:                    p4ssw0rd
</code>
This is great for production, but how can we get the same level of organization and clarity for our development environment? My classmate <a href="http://scottluptowski.com/" target="_blank">Scott Luptowski</a> told us about the <a href="https://github.com/bkeepers/dotenv" target="_blank">dotenv</a> gem that assists with that exact problem.</p>

<p>Start by including <code>gem 'dotenv-rails'</code> in your <code>Gemfile</code> in the appropriate groups. We only use it in <code>:test</code> and <code>:development</code>. Then, make a <code>.env</code> file at the root of your project directory. In it, include the assignments for each of the keys, tokens or passwords you want to call.</p>

<p>For example:</p>

<p><code>bash
API_KEY=abcefghijklmnopqrstuvwxyz
AUTH_TOKEN=abc123doremi
PASSWORD=p4ssw0rd
</code>
Rails will be able to call these variables anywhere in the application by using this pattern: <code>ENV['API_KEY']</code>, <code>ENV['AUTH_TOKEN']</code>, <code>ENV['PASSWORD']</code>. The hard coded keys will stay out of your code and you will have one organized place to manage all the necessary information. Just remember to also add the .env file to your .gitignore. The app should now work seamlessly in both local development and production Heroku environments. A simple solution for an important problem!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Like My Coffee Strong ... and My Params Stronger]]></title>
    <link href="http://gregeng.github.io/blog/2013/11/06/i-like-my-coffee-strong-and-my-params-stronger/"/>
    <updated>2013-11-06T21:16:00-08:00</updated>
    <id>http://gregeng.github.io/blog/2013/11/06/i-like-my-coffee-strong-and-my-params-stronger</id>
    <content type="html"><![CDATA[<p>Before understanding the need for strong params in Rails, let&rsquo;s take a look at the idea of mass assignment in Ruby.</p>

<p>Mass assignment is a convenient technique rubyists can use to easily assign multiple attributes to an object at instantiation. Yanik Jayaram provides an excellent description of it in his blog <a href="http://modernlegend.github.io/blog/2013/03/16/what-is-mass-assignment/" target="_blank">post</a>. It uses elements of metaprogramming and the idea of dynamic definition which is artfully described by Emily Xie <a href="http://emilyxxie.github.io/blog/2013/11/02/defining-the-undefined-dynamic-definition-for-ruby-newcomers/" target="_blank">here</a>.</p>

<p>This pattern becomes extremely useful in Rails when dealing with user input in forms. A sign up form is a great place for this pattern.</p>

<p>Let&rsquo;s take a look at an example:</p>

<div align="center">
  <h2>Sign Up</h2>
  <form accept-charset="UTF-8" action="/create" class="signup-form" id="user_new" method="post">
    <input type="text" name="user[first_name]" placeholder="First name" value=""><br>
    <input type="text" name="user[last_name]" placeholder="Last name" value=""><br>
    <input type="email" name="user[email]" placeholder="Email Address" value=""><br>
    <input type="password" name="user[password]" placeholder="Password"><br>
    <input type="password" name="user[password_confirmation]" placeholder="Confirm Password"><br>
  </form>
</div>


<p>And here is the markup used to create that form:</p>

<p><code>html
&lt;form action="/create"   method="post"&gt;
  &lt;input type="text"     name="user[first_name]"            placeholder="First name"      value=""&gt;
  &lt;input type="text"     name="user[last_name]"             placeholder="Last name"       value=""&gt;
  &lt;input type="email"    name="user[email]"                 placeholder="Email Address"   value=""&gt;
  &lt;input type="password" name="user[password]"              placeholder="Password"                &gt;
  &lt;input type="password" name="user[password_confirmation]" placeholder="Confirm Password"        &gt;
&lt;/form&gt;
</code>
Once the user submits this form, the params hash will inlude all the input values neatly nested as key value pairs within the sub key <code>user</code> hash. Then, it would be appropriate to assume somewhere in the <code>UsersController</code>, there is a method like this:</p>

<p>```ruby
UsersController</p>

<p>  def create</p>

<pre><code>@user = User.new(params[:user])
  if @user.save
    redirect_to @user
  else
    "Error!"
  end
</code></pre>

<p>  end
end</p>

<p><code>``
Instead of having to individually call the following methods,</code>first_name=<code>,</code>last_name=<code>,</code>email=<code>, and</code>password=` to set all of these input values &hellip; mass assignment lets us get it done at a higher level of abstraction.</p>

<p>But with this convenience lies a crucial vulnerability. In the form example above, we can assume that this web application is backed by a database with a <code>users</code> table that may have more columns than the form leads us to believe. Perhaps administrators also have user accounts within the application and certain permissions are allocated to them. This could be based on an <code>admin</code> column that takes a boolean value of 0 or 1.</p>

<p>Using this knowledge, we can maliciously change any one of the inputs to alter the <code>admin</code> column instead &hellip; even if this wasn&rsquo;t the original intent of the form. Using Google&rsquo;s Chrome browser, I can inspect the element of the form and change the email input field to reference <code>user[admin]</code> instead of <code>user[email]</code></p>

<p>That might look something like this:</p>

<div align="center">
  <h2>Sign Up</h2>
  <form accept-charset="UTF-8" action="/create" class="signup-form" id="user_new" method="post">
    <input type="text" name="user[first_name]" placeholder="First name" value="Greg"><br>
    <input type="text" name="user[last_name]" placeholder="Last name" value="Eng"><br>
    <input type="email" name="user[admin]" placeholder="Email Address" value="1"><br>
    <input type="password" name="user[password]" placeholder="Password" value="password"><br>
    <input type="password" name="user[password_confirmation]" placeholder="Confirm Password" value="password"><br>
  </form>
</div>


<p><code>html
&lt;form action="/create"   method="post"&gt;
  &lt;input type="text"     name="user[first_name]"            placeholder="First name"      value=""&gt;
  &lt;input type="text"     name="user[last_name]"             placeholder="Last name"       value=""&gt;
  &lt;input type="email"    name="user[admin]"                 placeholder="Email Address"   value=""&gt;
  &lt;input type="password" name="user[password]"              placeholder="Password"                &gt;
  &lt;input type="password" name="user[password_confirmation]" placeholder="Confirm Password"        &gt;
&lt;/form&gt;
</code></p>

<p>Now when I submit this form, the controller is going to create a record in the <code>users</code> table that is missing my email address. Instead, it will set the <code>admin</code> column to true and give me admin access rights to the application. Depending on the domain, I might be able to see and do a multitude of things I normally couldn&rsquo;t otherwise. That seems not preferable.</p>

<p>Luckily part of the Rails 4.0 core is a pattern that reinforces the idea of strong params. If we were to generate a scaffold using the <code>user</code> resource detailed above, it would produce 2 methods in the controller that look like this:</p>

<p>```ruby</p>

<h1>Rails 4.0</h1>

<p>UsersController</p>

<p>  def create</p>

<pre><code>@user = User.new(user_params)
  if @user.save
    redirect_to @user
  else
    "Error!"
  end
</code></pre>

<p>  end</p>

<p>  private</p>

<pre><code>def user_params
  params.require(:user).permit(:first_name, :last_name, :email, :password)
end
</code></pre>

<p>  end
end
```</p>

<p>This pattern illustrates the idea of sanitizing the parameters before letting them get anywhere near our domain model. Instead of directly taking in the params submitted through the internet form in the <code>create</code> method, we will first call the <code>private</code> method <code>user_params</code> (named after the resource).  This says it should require a sub key of <code>user</code> (resource name) and then only permit certain keys to make it through to the domain model. In effect, this creates a white list of acceptable inputs or <em>strong parameters</em>.</p>

<p>Now, the worst thing that could happen is a form that is submitted with incomplete user data. I think most would agree that is better than the former scenario.</p>

<p>The Rails scaffold comments on this pattern directly in the controller file:</p>

<blockquote><p>Never trust parameters from the scary internet, only allow the white list through.</p></blockquote>

<p>I like to imagine <a href="https://twitter.com/dhh/status/182591044108562433" target="_blank">DHH</a> himself saying this to really drive this point home.</p>

<p>So you too should enjoy your parameters and coffee the same way: <strong>strong</strong>.
Your code will be more defensive and the data will be cleaner in the long run.</p>

<br>


<h3>Additional Resources:</h3>


<p><a href = "http://edgeapi.rubyonrails.org/classes/ActionController/StrongParameters.html" target="_blank">Documentation</a><br>
<a href = "http://weblog.rubyonrails.org/2012/3/21/strong-parameters/" target="_blank"> DHH&rsquo;s Blog Post</a><br>
<a href ="http://pivotallabs.com/rails-4-testing-strong-parameters/" target="_blank">Pivotal Labs on Testing Strong Params</a><br>
<a href= "https://github.com/rails/strong_parameters" target="_blank"> Strong Params Gem for Earlier Ruby Versions</a><br></p>
]]></content>
  </entry>
  
</feed>

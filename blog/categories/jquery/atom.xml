<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jquery | Greg Eng]]></title>
  <link href="http://gregeng.github.io/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://gregeng.github.io/"/>
  <updated>2014-08-17T20:21:54-07:00</updated>
  <id>http://gregeng.github.io/</id>
  <author>
    <name><![CDATA[Greg Eng]]></name>
    <email><![CDATA[greg.eng@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make Your Website More Accessible With These 5 Tips]]></title>
    <link href="http://gregeng.github.io/blog/2014/08/17/make-your-website-more-accessible-with-these-5-tips/"/>
    <updated>2014-08-17T19:59:00-07:00</updated>
    <id>http://gregeng.github.io/blog/2014/08/17/make-your-website-more-accessible-with-these-5-tips</id>
    <content type="html"><![CDATA[<p>Optimizing a website to adhere to web accessibility standards allows for a wider audience and user base. An accessible website should allow users who use screen readers and/or depend fully on the keyboard to use every piece of functionality on the website, in a logical manner.</p>

<p>In a recent project for work, I was tasked with creating a web accessible media display that passed AA standards. The following information and tips are things I wish I had a few weeks ago in order to help with the process. I hope it helps someone else in the future!</p>

<h1>Essentials:</h1>

<ul>
<li>Make sure everything is accessible by tab / shift+tab.</li>
<li>Err on the side of semantic html rather than forcing the use of the global tab index attribute. (In some cases, it will be unavoidable &hellip; like in certain description overlays or media lightboxes)</li>
<li>Provide a <code>title</code> to all <code>&lt;a&gt;</code> tags so that screen readers can read it.</li>
<li>Provide <code>alt</code> text to all images.</li>
<li>Use text as often as possible so that screen readers will successfully be able to provide voice over to the content. If it is not possible to use text due to specific styling concerns, make sure to be diligent about the alternate text that is associated with the image.</li>
<li>Choose colors with a high amount of contrast to make text easily readable.</li>
</ul>


<h1>5 Pro-Tips:</h1>

<ol>
1. Set up an event listener to add a class to the body of using-keyboard.

<p>This allows you to implement different :focus pseudo-class selectors when using/not using the keyboard.</p>


```js
$(document).keydown(function(e) {
  $('body').addClass('using-keyboard');
});

$(document).mouseup(function(e) {
  $('body').removeClass('using-keyboard');
});
```

2. Write :focus and :active styles.

```css
* body.using-keyboard:focus {
  outline: 2px dashed red;
}

*:focus {
  outline: 2px dashed red;
}

*:active {
  outline: none;
}
```

3. Use this function to make things behind an overlay inaccessible via keyboard.

```js
$('.the-last-element-you-want-to-tab').blur(function(){
  $('.the-first-element-you-want-to-tab').focus();
});
```

<p>Thank you to <a href="http://stackoverflow.com/questions/11351983/how-to-limit-tab-indexes-to-just-an-overlay-and-its-elements
" target="_blank">this post</a> on stackoverflow for helping me solve this issue.</p>


4. Force a specific tabindex keyboard interaction flow
<p>If tab indexes arenâ€™t working properly... which can be highly likely in Internet Explorer, you can force the route you want the user flow to go with this function. Note you will need to be very specific about the global tab index property.</p>

```js
var tabindex = $('*:focus').attr('tabindex');
var lastTabindex = 10;  // make this the highest tab index number you have on the page
$(document).keyup(function(e) {
  if (e.which === 9 && tabindex !== lastTabindex) {
    tabindex += 1;
    $('[tabindex=' + tabindex + ']').focus();
  } else {
    tabindex = 1;
    $('[tabindex=1]').focus();
  }
});
```
5. Reset focus to triggering elements.
This is applicable after visiting another page, overlay, lightbox, etc.<br>
<p>An easy way to do this is to assign an id to the tag that triggers the page, overlay, or lightbox. After closing that region, reset focus to the triggering element with jQuery by focusing on the asset matching the id.</p>

</ol>


<h3>Additional Resources:</h3>

<ul>
<li><a href="http://www.w3.org/WAI/intro/accessibility.php">http://www.w3.org/WAI/intro/accessibility.php</a></li>
<li><a href="http://www.w3.org/WAI/WCAG20/quickref/Overview.php">http://www.w3.org/WAI/WCAG20/quickref/Overview.php</a></li>
<li><a href="http://www.w3.org/TR/WCAG20/">http://www.w3.org/TR/WCAG20/</a></li>
</ul>


<p>And if you were curious to interact with the final product, web accessible and all &hellip; you can check it out at:</p>

<p><a href="http://firstdayofschool.target.com" target="_blank">firstdayofschool.target.com</a></p>
]]></content>
  </entry>
  
</feed>

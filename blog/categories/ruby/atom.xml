<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Greg Eng]]></title>
  <link href="http://gregeng.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://gregeng.github.io/"/>
  <updated>2014-03-09T21:16:21-07:00</updated>
  <id>http://gregeng.github.io/</id>
  <author>
    <name><![CDATA[Greg Eng]]></name>
    <email><![CDATA[greg.eng@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hello Again]]></title>
    <link href="http://gregeng.github.io/blog/2014/03/09/hello-again/"/>
    <updated>2014-03-09T20:46:00-07:00</updated>
    <id>http://gregeng.github.io/blog/2014/03/09/hello-again</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a few months since I&rsquo;ve updated my blog and I apologize! But a lot has happened since then. I graduated from the <a href="http://flatironschool.com/" target="_blank">Flatiron School</a>, moved from New York to San Francisco, and started a new job.</p>

<p>For the past 2 months, I&rsquo;ve been working at <a href="http://xamarin.com/" target="_blank">Xamarin</a> as a Mobile Test Automation <a href="http://xamarin.com/jobs/ofc4Xfwc" target="_blank">Intern</a>.</p>

<p>This means I get to author <em>automated</em> UI test scripts for various Android and iOS applications. These scripts then aid in ensuring the highest quality apps by testing them for functional bugs and UI mishaps across various devices in a burgeoning product called the Xamarin <a href="http://xamarin.com/test-cloud" target="_blank">Test Cloud</a>.</p>

<p>In a previous role, I was <em>manually</em> QA testing mobile applications on both platforms, so in a way &hellip;things have come full circle. It&rsquo;s really exciting to apply new skills to a familiar craft.</p>

<p>In the past 8 weeks I have learned so much and I anticipate learning even more. I want to seize the opportunity to write about it. I&rsquo;m looking forward to covering topics such as testing, QA, BDD, mobile, <a href="http://cukes.info/" target="_blank">cucumber</a>, and <a href="http://calaba.sh/" target="_blank">calabash</a>.</p>

<p>I&rsquo;m excited to tell you all about it.<br><br>Until then!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[blog post ideas]]></title>
    <link href="http://gregeng.github.io/blog/2014/03/06/blog-post-ideas/"/>
    <updated>2014-03-06T20:29:00-08:00</updated>
    <id>http://gregeng.github.io/blog/2014/03/06/blog-post-ideas</id>
    <content type="html"><![CDATA[<h2>some of this is for you but most of it is for me.. alot of this is to help me remember what i learned and serve as a reference to remind myself things later</h2>

<h3>1. non-technical explanation post</h3>

<p>categories: QA, calabash, cucumber, ruby, mobile, android, ios, non-technical, testing,</p>

<p>Hello Again</p>

<p>Hello Again &ndash; Calabash</p>

<p>It&rsquo;s been a few months since I&rsquo;ve updated my blog and I apologize! A lot has happened since then. I graduated from the Flatiron School, moved from New York to San Francisco, and started a new job.</p>

<p>For the past 2 months, I&rsquo;ve been interning at Xamarin as a Mobile Test Automation Intern.</p>

<p>This means I get to I author <strong>automated</strong> UI test scripts for various Android and iOS applications. These scripts then aid in ensuring the highest quality apps by testing them for functional bugs and UI deficiencies across various devices in a burgeoning product called the Xamarin Test Cloud.</p>

<p>In a previous role, I was <strong>manually</strong> QA testing mobile applications on both platforms, so in a way things have come full circle. It&rsquo;s really exciting to apply new skills to a familiar craft.</p>

<p>In the past 8 weeks I have learned so much and I anticipate learning even more. I want to seize the opportunity to write about it. I&rsquo;m looking forward to covering topics such as testing, QA, mobile, cucumber, and calabash.</p>

<p>I&rsquo;m excited to tell you all about it. Until then!</p>

<h3>2. What is Calabash?</h3>

<p>Why don&rsquo;t I let the co-creator of Calabash describe it to you? [Insert Video of Karl Explaining Here]</p>

<p>If you are in a hurry and don&rsquo;t have time to watch the video, here&rsquo;s a quick summary for you:</p>

<p>Android
-server runs along side the app
-resigned
-never rooted
-passes same standards as the Google Playstore</p>

<p>iOS
-server built into the app
-resigned
-never jailbroken
-passes same standards as App Store</p>

<p>explanation of how calabash works, with the server running in parallel versus baked into app ###
-calabash is the automation engine. cucumber is the vehicle. at the end of the day calabash converts the queries into something that literally changes to touch coordinates of where it has determined an element to exist.</p>

<h3>3. how to start writing android ui tests for any app</h3>

<ul>
<li>setting up the environment
-why am i choosing android? because of the way calabash works. the .ipa has to have the calabash framework built in when compiled. with android, you just have to resign it and you&rsquo;re good to go. it runs in parallel to the app.</li>
</ul>


<p><a href="https://docs.google.com/a/xamarin.com/document/d/1bAwXH9sRt7pSii1WTlLMQu5gv50gw0IZWO-zYiVhKvs/edit#">https://docs.google.com/a/xamarin.com/document/d/1bAwXH9sRt7pSii1WTlLMQu5gv50gw0IZWO-zYiVhKvs/edit#</a></p>

<p>test on a local device so much better.</p>

<p><a href="http://howto.cnet.com/8301-11310_39-57610905-285/how-to-record-your-screen-on-android-4.4-kitkat/">http://howto.cnet.com/8301-11310_39-57610905-285/how-to-record-your-screen-on-android-4.4-kitkat/</a></p>

<h3>4. the basics</h3>

<ul>
<li>query &ldquo;*&rdquo;</li>
<li>find an element on the page</li>
<li>query the index of that item</li>
<li>touch that item</li>
<li>it all boils down to querying objects. and then touching the objects.</li>
<li>its as easy as switching the query method to the touch method</li>
</ul>


<h3>5. strong and weak bindings.</h3>

<ul>
<li>query *</li>
<li>query index number</li>
<li>query text contains &mdash;&ndash; localized</li>
<li>query content description</li>
<li>query id &mdash;&ndash; developer buy in</li>
</ul>


<h3>6. helpful performAction arguments in calabash android</h3>

<p>scroll_down
scroll_up
send_key_enter
rotate devicie
swipe
touch and hold
drag coordinates</p>

<h3>7. granular steps in calabash android and cucumber. takes a screenshot at each step .. helpful for identifying ui bugs.</h3>

<ul>
<li>look up to make sure this is a calabash thing not a cucumber thing</li>
<li>A A A , Arange, Act, Assert. Given When Then</li>
</ul>


<h3>8. the page object patterm/model</h3>

<ul>
<li>you have to use an instance variable in the step definition to increase its scope since it is given within the step definition. In a future post, I will outline how this pattern fits in in terms of moving up the abstract ladder with calabash</li>
</ul>


<h2>9. a tale of 3 logins</h2>

<ul>
<li>good, better, even better (I dont like to throw the word best around lightly.)</li>
</ul>


<h2>10. .b.pdd</h2>

<p>-binding.pry driven development &ndash; the mobile automation workflow
Step 1
Launch the app from a local device or simulator
use <code>rake console</code> or calabash-android path_to_apk
within the irb console <code>reinstall_apps</code>
within the irb console <code>start_test_server_in_background</code>
navigate through various screens in the app and query different objects to get a feel for what you can work with
begin thinking of the flow for a use case or feature
think in terms of possible page objects you could construct and their methods
Pages
LoginPage, TourPage, HomePage
Methods
take_tour, enter_credentials, login
Most of the time the first feature you build will be a valid login</p>

<p>Step 2
Create a new feature file under app_name/features
Use convention ##_feature_name.feature
Using gherkin, write out in plain english the feature as you expect it to run</p>

<p>Step 3
Run the feature using <code>rake run</code> from the command line, which is a shortcut for
calabash-android run <code>path_to_apk</code>
Calabash will output to the console pending step definitions</p>

<p>Step 4
Create a new step_definition file under app_name/features/step_definitions
use convention feature_name_steps.rb
Copy and paste the pending step definitions from the command line to this file</p>

<p>Step 5
Based on what you discovered in the first step, begin to fill in your step definitions with the page objects and methods you will probably use.
@current_page is the instance variable you assign after instantiating a page object to expose the methods available at the time.
<code>page</code> is a helper method that instantiates each PageObject and .await ensures the code waits for the screen you intended before calling methods.</p>

<p>Step 6
Page objects are conventionally written in camel case, while their filename counterparts are in snake case
Create pages for everything you outlined in the step definitions under android/pages
convention page_name_page.rb
Under each page class, define a distinguishing trait as a method. The method takes in a query string. The trait should be something unique to that page.
Create methods for all other interactions you want to gain from the pages. It will be logical based on the way you wrote the step definitions.</p>

<p>Step 7
Run the tests using <code>rake run</code>
After confirming it work locally, upload to XTC</p>

<p>Pro-Tips
Use the pry gem to insert breakpoints into your app. When you run the scripts it will load all your page objects and methods allowing you to interact with the world your test-suite is defining
Abstract the entire login feature into a single step called <code>Given I am logged in</code> and put it under a step definition file called common_steps.rb</p>

<h3>11. creating a custom scroll in calabash-android</h3>

<ul>
<li>use frame layout. this always shows the size of the screen.</li>
<li>get the xy coordinates
-That thing I showed bharat. .class ? .keys .firt .class .first etc</li>
<li>helpful ruby functions.
-multiply by each to determine scroll speed.</li>
</ul>


<h3>12. random. type writer print</h3>

<p>-shout out to my friend david bella. would like to incorporate this into ui tests in calabash-android for showman purposes.</p>

<h3>13. random helpful adb tools, view hierarchy</h3>

<h1>Important Docs to Adapt to Blog Posts</h1>

<p>-Technical Training
-Git Resources
-Environment Setup
-That thing I showed bharat. .class ? .keys .firt .class .first etc</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hide Your Keys, Hide Your Tokens ... Unless Deploying to Heroku]]></title>
    <link href="http://gregeng.github.io/blog/2013/11/21/hide-your-keys/"/>
    <updated>2013-11-21T09:33:00-08:00</updated>
    <id>http://gregeng.github.io/blog/2013/11/21/hide-your-keys</id>
    <content type="html"><![CDATA[<p>In that case, you have to do a little more than just hide them.</p>

<p>Typically, an API will require a key or authentication token before serving data downstream. It&rsquo;s logical to avoid committing any of these to a public repo on GitHub, so I often found myself falling into a pattern. I would make hidden files in the assets folder of my project, then <code>.gitignore</code> each one.</p>

<p>It would result in a folder structure that might look like this:
```bash
/project</p>

<pre><code>/lib
  /assets
    .api_key
    .auth_token
    .password
</code></pre>

<p>```</p>

<p>Then in the class that controls all of the API calls, I would do something like this:</p>

<p>```ruby
Class API</p>

<p>  API_KEY = open(&lsquo;lib/assets/.api_key&rsquo;).read()
  AUTH_TOKEN = open(&lsquo;lib/assets/.auth_token&rsquo;).read
  PASSWORD = open(&lsquo;lib/assets/.password&rsquo;).read</p>

<p>  def some_method</p>

<pre><code>:user_key =&gt; API_KEY
:user_token =&gt; AUTH_TOKEN
:user_password =&gt; PASSWORD
</code></pre>

<p>  end</p>

<p>end
```
I set each relevant piece to a constant to be used in methods throughout the API interactions.</p>

<p>This way feels a little clunky, but it works. As long as you remember to add each hidden file to the .gitignore, it keeps the credentials safe. But as a project grows and it accumulates more authorizations, it becomes a little difficult to manage.</p>

<p>It wasn&rsquo;t until my group tried to deploy an app to Heroku that we discovered the better way. Heroku makes it simple to deploy a Rails app, but as a result it lacks a lot of the bells and whistles. As a result, it is impossible to log in to the server in a shell to upload each individual hidden file described above.</p>

<p>In order to accomplish the same level of security and function, we can instead use Heroku config variables that will be read at runtime. Heroku has some great <a href="https://devcenter.heroku.com/articles/config-vars#local-setup" target="_blank">documentation</a> on this topic.</p>

<p>It&rsquo;s very easy to set up from the local shell. Thanks to my teammate <a href="http://davidbella.github.io/" target="_blank">David Bella</a>, we were able to figure out what we needed to do immediately.</p>

<p>Just navigate to the root of your project directory and run the <code>heroku config:set</code> command.</p>

<p>For example:
<code>bash
heroku config:set API_KEY=abcefghijklmnopqrstuvwxyz
heroku config:set AUTH_TOKEN=abc123doremi
heroku config:set PASSWORD=p4ssw0rd
</code>
That&rsquo;s all there is to it! If you want to see your setup at any point, just type <code>heroku config</code> to see an output like this:</p>

<p><code>bash
API_KEY:                     abcefghijklmnopqrstuvwxyz
AUTH_TOKEN:                  abc123doremi
PASSWORD:                    p4ssw0rd
</code>
This is great for production, but how can we get the same level of organization and clarity for our development environment? My classmate <a href="http://scottluptowski.com/" target="_blank">Scott Luptowski</a> told us about the <a href="https://github.com/bkeepers/dotenv" target="_blank">dotenv</a> gem that assists with that exact problem.</p>

<p>Start by including <code>gem 'dotenv-rails'</code> in your <code>Gemfile</code> in the appropriate groups. We only use it in <code>:test</code> and <code>:development</code>. Then, make a <code>.env</code> file at the root of your project directory. In it, include the assignments for each of the keys, tokens or passwords you want to call.</p>

<p>For example:</p>

<p><code>bash
API_KEY=abcefghijklmnopqrstuvwxyz
AUTH_TOKEN=abc123doremi
PASSWORD=p4ssw0rd
</code>
Rails will be able to call these variables anywhere in the application by using this pattern: <code>ENV['API_KEY']</code>, <code>ENV['AUTH_TOKEN']</code>, <code>ENV['PASSWORD']</code>. The hard coded keys will stay out of your code and you will have one organized place to manage all the necessary information. Just remember to also add the .env file to your .gitignore. The app should now work seamlessly in both local development and production Heroku environments. A simple solution for an important problem!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Like My Coffee Strong ... and My Params Stronger]]></title>
    <link href="http://gregeng.github.io/blog/2013/11/06/i-like-my-coffee-strong-and-my-params-stronger/"/>
    <updated>2013-11-06T21:16:00-08:00</updated>
    <id>http://gregeng.github.io/blog/2013/11/06/i-like-my-coffee-strong-and-my-params-stronger</id>
    <content type="html"><![CDATA[<p>Before understanding the need for strong params in Rails, let&rsquo;s take a look at the idea of mass assignment in Ruby.</p>

<p>Mass assignment is a convenient technique rubyists can use to easily assign multiple attributes to an object at instantiation. Yanik Jayaram provides an excellent description of it in his blog <a href="http://modernlegend.github.io/blog/2013/03/16/what-is-mass-assignment/" target="_blank">post</a>. It uses elements of metaprogramming and the idea of dynamic definition which is artfully described by Emily Xie <a href="http://emilyxxie.github.io/blog/2013/11/02/defining-the-undefined-dynamic-definition-for-ruby-newcomers/" target="_blank">here</a>.</p>

<p>This pattern becomes extremely useful in Rails when dealing with user input in forms. A sign up form is a great place for this pattern.</p>

<p>Let&rsquo;s take a look at an example:</p>

<div align="center">
  <h2>Sign Up</h2>
  <form accept-charset="UTF-8" action="/create" class="signup-form" id="user_new" method="post">
    <input type="text" name="user[first_name]" placeholder="First name" value=""><br>
    <input type="text" name="user[last_name]" placeholder="Last name" value=""><br>
    <input type="email" name="user[email]" placeholder="Email Address" value=""><br>
    <input type="password" name="user[password]" placeholder="Password"><br>
    <input type="password" name="user[password_confirmation]" placeholder="Confirm Password"><br>
  </form>
</div>


<p>And here is the markup used to create that form:</p>

<p><code>html
&lt;form action="/create"   method="post"&gt;
  &lt;input type="text"     name="user[first_name]"            placeholder="First name"      value=""&gt;
  &lt;input type="text"     name="user[last_name]"             placeholder="Last name"       value=""&gt;
  &lt;input type="email"    name="user[email]"                 placeholder="Email Address"   value=""&gt;
  &lt;input type="password" name="user[password]"              placeholder="Password"                &gt;
  &lt;input type="password" name="user[password_confirmation]" placeholder="Confirm Password"        &gt;
&lt;/form&gt;
</code>
Once the user submits this form, the params hash will inlude all the input values neatly nested as key value pairs within the sub key <code>user</code> hash. Then, it would be appropriate to assume somewhere in the <code>UsersController</code>, there is a method like this:</p>

<p>```ruby
UsersController</p>

<p>  def create</p>

<pre><code>@user = User.new(params[:user])
  if @user.save
    redirect_to @user
  else
    "Error!"
  end
</code></pre>

<p>  end
end</p>

<p><code>``
Instead of having to individually call the following methods,</code>first_name=<code>,</code>last_name=<code>,</code>email=<code>, and</code>password=` to set all of these input values &hellip; mass assignment lets us get it done at a higher level of abstraction.</p>

<p>But with this convenience lies a crucial vulnerability. In the form example above, we can assume that this web application is backed by a database with a <code>users</code> table that may have more columns than the form leads us to believe. Perhaps administrators also have user accounts within the application and certain permissions are allocated to them. This could be based on an <code>admin</code> column that takes a boolean value of 0 or 1.</p>

<p>Using this knowledge, we can maliciously change any one of the inputs to alter the <code>admin</code> column instead &hellip; even if this wasn&rsquo;t the original intent of the form. Using Google&rsquo;s Chrome browser, I can inspect the element of the form and change the email input field to reference <code>user[admin]</code> instead of <code>user[email]</code></p>

<p>That might look something like this:</p>

<div align="center">
  <h2>Sign Up</h2>
  <form accept-charset="UTF-8" action="/create" class="signup-form" id="user_new" method="post">
    <input type="text" name="user[first_name]" placeholder="First name" value="Greg"><br>
    <input type="text" name="user[last_name]" placeholder="Last name" value="Eng"><br>
    <input type="email" name="user[admin]" placeholder="Email Address" value="1"><br>
    <input type="password" name="user[password]" placeholder="Password" value="password"><br>
    <input type="password" name="user[password_confirmation]" placeholder="Confirm Password" value="password"><br>
  </form>
</div>


<p><code>html
&lt;form action="/create"   method="post"&gt;
  &lt;input type="text"     name="user[first_name]"            placeholder="First name"      value=""&gt;
  &lt;input type="text"     name="user[last_name]"             placeholder="Last name"       value=""&gt;
  &lt;input type="email"    name="user[admin]"                 placeholder="Email Address"   value=""&gt;
  &lt;input type="password" name="user[password]"              placeholder="Password"                &gt;
  &lt;input type="password" name="user[password_confirmation]" placeholder="Confirm Password"        &gt;
&lt;/form&gt;
</code></p>

<p>Now when I submit this form, the controller is going to create a record in the <code>users</code> table that is missing my email address. Instead, it will set the <code>admin</code> column to true and give me admin access rights to the application. Depending on the domain, I might be able to see and do a multitude of things I normally couldn&rsquo;t otherwise. That seems not preferable.</p>

<p>Luckily part of the Rails 4.0 core is a pattern that reinforces the idea of strong params. If we were to generate a scaffold using the <code>user</code> resource detailed above, it would produce 2 methods in the controller that look like this:</p>

<p>```ruby</p>

<h1>Rails 4.0</h1>

<p>UsersController</p>

<p>  def create</p>

<pre><code>@user = User.new(user_params)
  if @user.save
    redirect_to @user
  else
    "Error!"
  end
</code></pre>

<p>  end</p>

<p>  private</p>

<pre><code>def user_params
  params.require(:user).permit(:first_name, :last_name, :email, :password)
end
</code></pre>

<p>  end
end
```</p>

<p>This pattern illustrates the idea of sanitizing the parameters before letting them get anywhere near our domain model. Instead of directly taking in the params submitted through the internet form in the <code>create</code> method, we will first call the <code>private</code> method <code>user_params</code> (named after the resource).  This says it should require a sub key of <code>user</code> (resource name) and then only permit certain keys to make it through to the domain model. In effect, this creates a white list of acceptable inputs or <em>strong parameters</em>.</p>

<p>Now, the worst thing that could happen is a form that is submitted with incomplete user data. I think most would agree that is better than the former scenario.</p>

<p>The Rails scaffold comments on this pattern directly in the controller file:</p>

<blockquote><p>Never trust parameters from the scary internet, only allow the white list through.</p></blockquote>

<p>I like to imagine <a href="https://twitter.com/dhh/status/182591044108562433" target="_blank">DHH</a> himself saying this to really drive this point home.</p>

<p>So you too should enjoy your parameters and coffee the same way: <strong>strong</strong>.
Your code will be more defensive and the data will be cleaner in the long run.</p>

<br>


<h3>Additional Resources:</h3>


<p><a href = "http://edgeapi.rubyonrails.org/classes/ActionController/StrongParameters.html" target="_blank">Documentation</a><br>
<a href = "http://weblog.rubyonrails.org/2012/3/21/strong-parameters/" target="_blank"> DHH&rsquo;s Blog Post</a><br>
<a href ="http://pivotallabs.com/rails-4-testing-strong-parameters/" target="_blank">Pivotal Labs on Testing Strong Params</a><br>
<a href= "https://github.com/rails/strong_parameters" target="_blank"> Strong Params Gem for Earlier Ruby Versions</a><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yield! In the Name of Blocks]]></title>
    <link href="http://gregeng.github.io/blog/2013/10/23/yield-in-the-name-of-blocks/"/>
    <updated>2013-10-23T08:38:00-07:00</updated>
    <id>http://gregeng.github.io/blog/2013/10/23/yield-in-the-name-of-blocks</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s think it <a href="http://www.metrolyrics.com/stop-in-the-name-of-love-lyrics-the-supremes.html" target="_blank">over</a>&hellip;</p>

<p>In an earlier <a href="http://gregeng.github.io/blog/2013/10/09/abstraction-and-3-iterators/" target="_blank">post</a>, I talked about a few Ruby iterators and how they abstract to become useful tools. As promised, I&rsquo;m going to further break them down in order to describe the conept of <code>yield</code> in Ruby.</p>

<p>In Ruby, methods are functions that allow code to interact with all different pieces of the program. Compared to spoken languages, you can think of methods as the verbs which connect to nouns and other words to form sentences. Methods are able to receive a code <code>block</code> which unlocks limitless potential.
When defining our own methods, the magic of <code>yield</code> comes into play. If a method expects a block, it can invoke it by using <code>yield</code>.</p>

<p>For example:</p>

<p>```ruby</p>

<p>class Weather</p>

<pre><code>def initialize(type)
     @type = type
end

def forecast
    yield(@type)
end
</code></pre>

<p>end</p>

<p>today = Weather.new(&ldquo;hot&rdquo;)</p>

<p><code>``
Here I am defining a weather class that takes an argument at instantiation. I've also defined a method</code>forecast` that will take any block given and pass it the argument.</p>

<p>```ruby</p>

<p>today.forecast do |type|
  puts &ldquo;It&rsquo;s going to be #{type}!&rdquo;
end</p>

<h1>=> It&rsquo;s going to be hot!</h1>

<p>```
As you can see, I&rsquo;ve interpolated the variable with a friendly little forecast sentence.</p>

<p>But I could just as easily use a different block to perform a different function.</p>

<p>```ruby</p>

<p>today.forecast do |type|
  puts &ldquo;It&rsquo;s going to be #{type.upcase}, #{type.upcase}, #{type.upcase}!&rdquo;
end</p>

<h1>=> It&rsquo;s going to be HOT, HOT, HOT!</h1>

<p>```</p>

<p>In this case&hellip; I am loudly saying it&rsquo;s going to be <em>fairly</em> warm.</p>

<p>Building on this idea, you can see that it essentially allows any method to easily become an iterator. Here is another look at the iterators described in my previous post: <code>each</code>, <code>collect</code>, <code>select</code>.</p>

<p><code>each</code> dissected:</p>

<p>```ruby
def my_each(array)
  i = 0
  while i &lt; array.length</p>

<pre><code>yield(array[i])
i += 1
</code></pre>

<p>  end
  array
end</p>

<p>my_each([1,2,3,4,5]) { |x| puts x * x }</p>

<h1>OUTPUT:</h1>

<h1>1</h1>

<h1>4</h1>

<h1>9</h1>

<h1>16</h1>

<h1>25</h1>

<p>=> [1, 2, 3, 4, 5]
```</p>

<p><code>collect</code> dissected:</p>

<p>```ruby
def my_collect(array)
  i = 0
  collect = []
  while i &lt; array.length</p>

<pre><code>collect &lt;&lt; (yield(array[i]))
i += 1
</code></pre>

<p>  end
  collect
end</p>

<p>collect_results = my_collect([1,2,3,4,5]) { |x| x * x }</p>

<p>=> [1, 4, 9, 16, 25]
```</p>

<p><code>select</code> dissected:</p>

<p>```ruby
def my_select(array)
  i = 0
  select = []
  while i &lt; array.length</p>

<pre><code>if (yield(array[i]))
  select &lt;&lt; array[i]
end
i+=1
</code></pre>

<p>  end
  select
end</p>

<p>select_results = my_select([1,2,3,4,5]) { |x| x == 3 }</p>

<p>=> [3]
```</p>

<p>BONUS <code>none?</code> dissected:</p>

<p>```ruby
def my_none?(array)
  i = 0
  while i &lt; array.length</p>

<pre><code>if (yield(array[i]))
  return false
end
i += 1
</code></pre>

<p>  end
  true
end</p>

<p>my_none?([1,2,3]) { |x| x == 3 }</p>

<p>=> false</p>

<p>my_none?([1,2,3]) { |x| x == 4 }</p>

<p>=> true
```</p>

<p>BONUS <code>include?</code> dissected:</p>

<p>```ruby
def my_include?(array)
  i = 0
  while i &lt; array.length</p>

<pre><code>if (yield(array[i]))
  return true
end
i += 1
</code></pre>

<p>  end
  false
end</p>

<p>my_include?([1,2,3]) { |x| x == 3 }
=> true
my_include?([1,2,3]) { |x| x == 4 }
=> false
```</p>

<p>These examples are simple and isolated, but <code>yield</code> truly provides myriad possibilities when building sophisticated programs. To prove it, check out this <a href="http://rubylearning.com/blog/2010/11/30/how-do-i-build-dsls-with-yield-and-instance_eval/" target="_blank">blog post</a> by Michael Bleigh where he described constructing eloquent looking code to design a DSL (Domain Specific Language) with the help of <code>yield</code>.</p>

<p>Have you ever used <code>yield</code> to do something clever or noteworthy? Sound off in the comments!</p>
]]></content>
  </entry>
  
</feed>
